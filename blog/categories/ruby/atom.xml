<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Stewart Gleadow's Blog]]></title>
  <link href="http://www.stewgleadow.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.stewgleadow.com/"/>
  <updated>2013-06-14T10:18:00+10:00</updated>
  <id>http://www.stewgleadow.com/</id>
  <author>
    <name><![CDATA[Stewart Gleadow]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing RVM on OS X Lion]]></title>
    <link href="http://www.stewgleadow.com/blog/2011/12/10/installing-rvm-on-os-x-lion/"/>
    <updated>2011-12-10T19:28:00+11:00</updated>
    <id>http://www.stewgleadow.com/blog/2011/12/10/installing-rvm-on-os-x-lion</id>
    <content type="html"><![CDATA[<p>I wrote a post a little while ago about transferring my Ruby dev environments to use <a href="http://beginrescueend.com/">rvm</a> to organise and separate Ruby envinroments and assosiated <a href="http://beginrescueend.com/gemsets/">gemsets</a>. I just got a new MacBook Air which I&rsquo;m setting up at the moment, so I&rsquo;m running through the set up process again. Here are my notes.</p>

<p>There are a few rvm haters out there who find it to be over-engineered and trying to do too much. If that&rsquo;s you, there is another, more lightweight tool called <a href="https://github.com/sstephenson/rbenv">rbenv</a> that you can use and if you really like separate gemsets, someone has written <a href="https://github.com/jamis/rbenv-gemset">rbenv-gemset</a> to go with it. I have a handful of projects already set up with rvm, so I&rsquo;m going to keep using it for now.</p>

<p>Installing rvm itself is pretty easy. The <a href="http://beginrescueend.com/">rvm homepage</a> gives a quick install command:</p>

<p><code>
bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></p>

<p>and then add this to your shell profile:</p>

<p><code>
[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"
</code></p>

<p>That works fine. Now it&rsquo;s time to install some rubies &ndash; at the moment I have projects using 1.8.7 and 1.9.2, and I&rsquo;d like to use 1.9.3 going forward. I used the following command and got an error:</p>

<p><code>
rvm install 1.8.7
...
ERROR: There has been an error while running configure. Halting the installation.
</code></p>

<p>It turns out this is a common issue in OS X Lion because gcc is just a sym link to LLVM, and the whole installation gets a bit confused (that&rsquo;s the technical term for it). I read on <a href="http://www.mattpolito.info/post/9383196211/rvm-ruby-install-on-lion-got-you-down">Matt Polito&rsquo;s blog</a> that you can simply point the CC environment variable straight to GCC 4.2 like this:</p>

<p><code>
CC=/usr/bin/gcc-4.2 rvm install &lt;ruby version&gt;
</code></p>

<p>That didn&rsquo;t work for me. I&rsquo;m using a brand new machine with Xcode 4.2 installed. It turns out this solution worked for Xcode 4.1 but 4.2 does not install the right gcc to use. One solution I saw was to roll back to Xcode 4.1 and then install Xcode 4.2 again. That seemed like it would take a while, so I used the standalone OS X GCC installer from <a href="https://github.com/kennethreitz/osx-gcc-installer.">https://github.com/kennethreitz/osx-gcc-installer.</a> After that, installing different Rubies worked fine. I&rsquo;m hoping that installing gcc like this doesn&rsquo;t mess up my Xcode 4.2. So far so good, the few Xcode projects I&rsquo;ve tried still compile and run fine.</p>

<p><strong>Edit:</strong> I think next time I will try the approach mentioned by <a href="https://twitter.com/tonyarnold">Tony Arnold</a> in the comments below, using the <code>--with-gcc=clang</code> option to rvm, something like this:</p>

<p><code>
rvm install 1.9.3 --reconfigure --debug -C --enable-pthread --with-gcc=clang
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM: Escaping Gem Dependency Hell]]></title>
    <link href="http://www.stewgleadow.com/blog/2011/03/27/rvm-escaping-gem-dependency-hell/"/>
    <updated>2011-03-27T16:02:00+11:00</updated>
    <id>http://www.stewgleadow.com/blog/2011/03/27/rvm-escaping-gem-dependency-hell</id>
    <content type="html"><![CDATA[<p>This is my second post on my move to rvm. The first being about <a href="blog/2011/03/27/cleaning-out-ruby-gems-under-os-x/">cleaning out my existing gems</a> for a fresh start.</p>

<p>Bundler seemed like it was the ideal solution to having specific gems for specific projects, but it seems to install in your system gems by default causing version and dependency conflicts with other projects I&rsquo;m working on. I know I can use <code>bundle --deployment</code> but then I have to <code>bundle exec</code> everything and I don&rsquo;t have enough Ruby-fu to use the bundler-managed gems within Rakefile etc.</p>

<p>I&rsquo;m looking to <a href="http://rvm.beginrescueend.com/">rvm</a> to solve the problem. The steps I followed are below:</p>

<h2>Installing RVM</h2>

<p>There are some pretty good <a href="http://rvm.beginrescueend.com/rvm/install/">installation instructions</a> on the rvm site. The actual installation is a just single command.</p>

<p><code>bash
$ bash &lt; &lt;(curl -B http://rvm.beginrescueend.com/install/rvm)
</code></p>

<p>You&rsquo;ll see a bunch of output, and towards the bottom, a confirmation message saying &ldquo;Installation of RVM to /Users/sgleadow/.rvm/ is complete.&rdquo;, but that&rsquo;s not all. You need to set up your shell to know about rvm. Put the following line into your .bash_profile or wherever your chosen shell wants it.</p>

<p><code>bash
[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"
</code></p>

<p>After that, source your profile and check rvm is present and accessible.</p>

<p><code>bash
$ source ~/.bash_profile
$ which rvm/Users/sgleadow/.rvm/bin/rvm
/Users/sgleadow/.rvm/bin/rvm
$ rvm --version
rvm 1.5.2 by Wayne E. Seguin (wayneeseguin@gmail.com) [http://rvm.beginrescueend.com/]
$ type rvm | head -1
rvm is a function
</code></p>

<h2>Installing some Rubies</h2>

<p>Now that rvm is installed, let&rsquo;s install some rubies to use with it. First, check which ruby versions are available.</p>

<p><code>bash
$ rvm list known
...
[ruby-]1.8.7[-p334]
...
</code></p>

<p>I&rsquo;ll install the main two versions that I&rsquo;m using at the moment. Each install will take a few minutes, so this is a good time to make a cup of tea. I would usually say coffee but I haven&rsquo;t bought any fresh coffee beans in a while and the stuff I has is so old that the coffee tastes like sawdust.</p>

<p><code>bash
$ rvm install 1.8.7
$ rvm install 1.9.2
</code></p>

<p>I&rsquo;m still using 1.8.7 for some things at the moment, so I&rsquo;ll set that up as the default, and double check that the active ruby binary is now the one I just installed using rvm.</p>

<p><code>bash
$ rvm --default use 1.8.7
$ ruby -v
ruby 1.8.7 (2011-02-18 patchlevel 334) [i686-darwin10.7.0]
$ which ruby
/Users/sgleadow/.rvm/rubies/ruby-1.8.7-p334/bin/ruby
$ which gem
/Users/sgleadow/.rvm/rubies/ruby-1.8.7-p334/bin/gem
$ rvm list default
Default Ruby (for new shells)
ruby-1.8.7-p334 [ x86_64 ]
</code></p>

<p>Done. We have rvm up and running</p>

<h2>Setting up your gemsets</h2>

<p>While rvm solves the issue of having multiple versions of ruby installed on the one machine, and switching between them, it also allows you to set up multiple gemsets, which is the feature that started me on this journey in the first place. I&rsquo;d like to set up a separate gemset for each separate project to try and keep them separate and escape from dependency hell.</p>

<p>I should have a pretty clean slate to start on for my gems. I&rsquo;m not 100% on whether rvm will use my old system gems or not, but I&rsquo;ve cleaned them all out anyway, so it shouldn&rsquo;t be a problem.</p>

<p><code>bash
$ gem list
*** LOCAL GEMS ***
rake (0.8.7)
$ rvm list gemsets
rvm gemsets
=&gt; ruby-1.8.7-head [ x86_64 ]
   ruby-1.8.7-head@global [ x86_64 ]
   ruby-1.9.2-head [ x86_64 ]
   ruby-1.9.2-head@global [ x86_64 ]
</code></p>

<p>rvm will set up a default gemset for you, but I&rsquo;d like to have each project automatically set its own ruby version and gemset. We can use the .rvmrc file to achieve this. I&rsquo;m setting a project up that uses the <a href="https://github.com/moredip/Frank">Frank</a> iOS testing tool, below is a sample of the .rvmrc file I have <em>inside</em> that my project root directory. When I enter that directory in the shell, rvm picks up the rc file and will switch to that version of ruby (the part before the @) and also switch to a specific gemset (the part after the @). The <code>--create</code> means that if the gemset does not already exist, create one. The first time you enter the directory, you will need to specifically allow rvm to do this. After that, it&rsquo;s automatic.</p>

<p><code>bash
$ cat my_project/.rvmrc
rvm --create use ruby-1.8.7-p334@frank
</code></p>

<p>Once the .rvmrc file is created, leave and return to the directory to kick it off, authorise it and you should see something like <code>Using /Users/sgleadow/.rvm/gems/ruby-1.8.7-p334 with gemset frank</code> printed to the console. To double check we are, in fact, using the newly created gemset, use <code>rvm list gemsets</code> or <code>rvm gemset list</code> and check the little hashrocket is pointing to the new gemset. Do another <code>gem list</code> to double check you have a clean slate.</p>

<p>Most of my projects use bundler, so first I&rsquo;ll need to install that, then I can use bundler to manage all the gems I need installed. Before using bundler, I wanted to remove the existing gems that had been used by bundler.</p>

<p><code>bash
$ rm .bundle/config
$ rm -r vendor/bundle
$ gem install bundler
$ bundle
</code></p>

<p>Bundler should install all the gems listed in the Gemfile into the gemset you have just defined for this project. Once bundle is complete, check the gems were installed in the gemset and not just in vendor with <code>gem list</code>. If you&rsquo;re project is all set up with a Rakefile to run your tests, try that to double check everything has gone smoothly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cleaning Out Ruby Gems Under OS X]]></title>
    <link href="http://www.stewgleadow.com/blog/2011/03/27/cleaning-out-ruby-gems-under-os-x/"/>
    <updated>2011-03-27T15:55:00+11:00</updated>
    <id>http://www.stewgleadow.com/blog/2011/03/27/cleaning-out-ruby-gems-under-os-x</id>
    <content type="html"><![CDATA[<p>As a bit of background, I have been getting into Ruby development for the past year, but I have been getting into gem dependency hell recently. Different projects need different gemsets. <a href="http://gembundler.com/">Bundler</a> helps but I want to use that in combination with <a href="http://rvm.beginrescueend.com/">rvm</a> to keep things organised.</p>

<p>To get a clean start with rvm, so I wanted to remove all my existing system gems. My first attempt used the little shell script below to loop over all installed gems and remove them. That worked for a lot of gems, but left some behind, possibly all the default gems that come pre-installed with OS X.</p>

<p><code>$ for x in `gem list --no-versions` ; do gem uninstall -aIx $x; done</code></p>

<p>After some googling, the next step I tried was to physically remove the gem directories that are returned by <code>gem env paths</code>. After that, <code>gem list</code> said there were no gems installed. There were still some binaries left over that depended on these gems, like <code>spec</code>, <code>rails</code>, <code>rake</code> in <code>/usr/bin</code>. These binaries no longer worked as the actual gem was gone, so I removed them. I couldn&rsquo;t find a definitive list of the OS X default gems so I stopped here.</p>

<p>I&rsquo;m not a shell guru by any means, but below is my attempt at a quick one line shell script to remove all the existing gem directories.</p>

<p><code>rm -rf `gem env paths | tr ":" " "`</code></p>
]]></content>
  </entry>
  
</feed>
