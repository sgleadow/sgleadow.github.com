<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Stewart Gleadow&#8217;s Blog</title>
  <link href="http://sgleadow.github.com/atom.xml" rel="self"/>
  <link href="http://sgleadow.github.com/"/>
  <updated>2012-02-23T20:52:04+11:00</updated>
  <id>http://sgleadow.github.com/</id>
  <author>
    <name>Stewart Gleadow</name>
    
  </author>

  
  <entry>
    <title>Running OCUnit &amp; Kiwi Tests on the Command Line</title>
    <link href="http://sgleadow.github.com/blog/2012/02/09/running-ocunit-and-kiwi-tests-on-the-command-line/"/>
    <updated>2012-02-09T07:54:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2012/02/09/running-ocunit-and-kiwi-tests-on-the-command-line</id>
    <content type="html">&lt;p&gt;A common question I get asked is: how to I run my OCUnit tests from the command line? I&amp;#8217;ve answered this a number of times, so here is a quick brain dump so I can just point to this post each time. I say OCUnit, but since &lt;a href=&quot;https://github.com/allending/Kiwi&quot;&gt;Kiwi&lt;/a&gt; is just a wrapper above OCUnit, these instructions should also work for Kiwi tests.&lt;/p&gt;

&lt;h2&gt;Xcodebuild&lt;/h2&gt;

&lt;p&gt;OCUnit tests are run from a shell script during the build for that target, which is usually called something like MyAppTests. If you look at the &lt;em&gt;Build Phases&lt;/em&gt; for that target, you&amp;#8217;ll see a little RunScript phase that actually runs the tests:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;# Run the unit tests in this test bundle.
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&quot;${SYSTEM_DEVELOPER_DIR}/Tools/RunUnitTests&quot;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;We can then use the &lt;code&gt;xcodebuild&lt;/code&gt; command line utility to run this same build from the command line. On the command line (or from a Makefile if you are so inclined), try building and running the tests:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;xcodebuild -sdk iphonesimulator -configuration Debug -scheme MyAppTests build&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;This may or may not work, depending on whether or not you have &lt;em&gt;Logic&lt;/em&gt; or &lt;em&gt;Application&lt;/em&gt; tests. What?&lt;/p&gt;

&lt;h2&gt;Logic &amp;amp; Application Unit Tests&lt;/h2&gt;

&lt;p&gt;I&amp;#8217;m not sure why Apple bothers to differentiate these tests. The basic difference is that Application tests need to be run inside of a UIKit environment, while Logic tests don&amp;#8217;t. I&amp;#8217;d prefer if the build system just detected whether it needed UIKit and decided for you. There&amp;#8217;s a longer explanation in  &lt;a href=&quot;https://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/UnitTesting/00-About_Unit_Testing/about.html#//apple_ref/doc/uid/TP40002143&quot;&gt;Apple&amp;#8217;s unit testing guide&lt;/a&gt;. I often want to write unit tests for my UIViewController classes and any other UI logic, so I always tick the Application checkbox when adding unit tests to an Xcode project. If you&amp;#8217;re making a static library with no UI then you might want to select Logic.&lt;/p&gt;

&lt;p&gt;Anyway, if your project has &lt;em&gt;Logic&lt;/em&gt; tests, the above &lt;code&gt;xcodebuild&lt;/code&gt; command should run your unit tests fine and you will see the test output in the Terminal window. However, if they are Application tests, the command silently succeeds without actually running your tests. If you look near the bottom of the output, you&amp;#8217;ll see this in the output:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;/Developer/Platforms/iPhoneSimulator.platform/Developer/Tools/RunPlatformUnitTests:95:
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;warning: Skipping tests; the iPhoneSimulator platform does not currently support application-hosted tests (TEST_HOST set).&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;So the tests didn&amp;#8217;t even run, but the command succeeds, the build stays green and everyone&amp;#8217;s happy&amp;#8230; but the tests aren&amp;#8217;t running.&lt;/p&gt;

&lt;h2&gt;Running From The Command Line&lt;/h2&gt;

&lt;p&gt;I usually point people to &lt;a href=&quot;http://longweekendmobile.com/2011/04/17/xcode4-running-application-tests-from-the-command-line-in-ios/&quot;&gt;a post from the guys at Long Weekend&lt;/a&gt; for how to get these Application tests running from the command line. Here&amp;#8217;s quick summary:&lt;/p&gt;

&lt;p&gt;Open up &lt;code&gt;/Developer/Platforms/iPhoneSimulator.platform/Developer/Tools/RunPlatformUnitTests&lt;/code&gt; in your favourite editor and check out the code around line 95. You&amp;#8217;ll see the culprit line:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;Warning ${LINENO} &quot;Skipping tests; the iPhoneSimulator platform does not currently support application-hosted tests (TEST_HOST set).&quot;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;THe &lt;code&gt;TEST_HOST&lt;/code&gt; is only set when running the tests through Xcode, not from the command line. If the host isn&amp;#8217;t set, the tests don&amp;#8217;t run. We want them to run in this case. We could replace that line with the following:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;export OTHER_TEST_FLAGS=&quot;-RegisterForSystemEvents&quot;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;RunTestsForApplication &quot;${TEST_HOST}&quot; &quot;${TEST_BUNDLE_PATH}&quot;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;This command will actually boot up your app in the iOS simulator and run the tests in that UI environment.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t really feel comfortable hacking scripts in my Developer directory, so I&amp;#8217;d rather copy this script into my project and run it from there. Also, editing the actual installed tools like this means that you have to do it on each and every machine running the tests. Even once you get it running on your machine, you&amp;#8217;ll need to log into your build machine and make the same hack there. Try making a copy of the same shell script Apple uses into your project directory:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;cd your-project
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;mkdir scripts
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;cp /Developer/Platforms/iPhoneSimulator.platform/Developer/Tools/RunPlatformUnitTests scripts/&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Now edit that local copy of your shell script to replace line 95 to actually run the tests in the simulator environment. The MyAppTests target is still pointing to the system developer script. In Xcode, open up the &lt;em&gt;Build Phases&lt;/em&gt; for your test target and change the &lt;em&gt;Run Script&lt;/em&gt; to point to your local script:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;# Run the unit tests in this test bundle.
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&quot;${SRCROOT}/../scripts/RunPlatformUnitTests&quot;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Run the tests in the IDE to make sure you didn&amp;#8217;t screw anything up. Now quit the simulator, and run them from the command line with xcodebuild again. You should see the test output printed and a few statements at the bottom saying that the tests succeeded. Your tests do pass, right?&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;/Developer/Tools/RunPlatformUnitTests.include:334: note: Passed tests for architecture &#8216;i386&#8217; (GC OFF)
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;/Developer/Tools/RunPlatformUnitTests.include:345: note: Completed tests for architectures &#8216;i386&#8217;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;One simulator to rule them all&lt;/h2&gt;

&lt;p&gt;The reason I said to close the simulator before running the tests from the command line is that the tests don&amp;#8217;t seem to like running when the iOS Simulator is already doing something. Try it. Open the simulator, and then run the tests. If your system is anything like mine, you get an error like this:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;** BUILD FAILED **
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;The following build commands failed:
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    PhaseScriptExecution &quot;Run Script&quot; path-to-the-script-in-derived-data&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;If I&amp;#8217;m running them locally, I see this, quit the simulator and try again. That&amp;#8217;s a bit of a pain, and it certainly wont work on the CI server. To solve that, in my Makefile, I just use a little Applescript to close the simulator before running the tests:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;test:
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    osascript -e &#8216;tell app &quot;iPhone Simulator&quot; to quit&#8217;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    xcodebuild -sdk iphonesimulator -configuration Debug -scheme MyAppTests build&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Now I can use the command &lt;code&gt;make test&lt;/code&gt; to run the tests from the command line both on my machine and the CI server without having to change the development environment.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Installing RVM on OS X Lion</title>
    <link href="http://sgleadow.github.com/blog/2011/12/10/installing-rvm-on-os-x-lion/"/>
    <updated>2011-12-10T19:28:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/12/10/installing-rvm-on-os-x-lion</id>
    <content type="html">&lt;p&gt;I wrote a post a little while ago about transferring my Ruby dev environments to use &lt;a href=&quot;http://beginrescueend.com/&quot;&gt;rvm&lt;/a&gt; to organise and separate Ruby envinroments and assosiated &lt;a href=&quot;http://beginrescueend.com/gemsets/&quot;&gt;gemsets&lt;/a&gt;. I just got a new MacBook Air which I&amp;#8217;m setting up at the moment, so I&amp;#8217;m running through the set up process again. Here are my notes.&lt;/p&gt;

&lt;p&gt;There are a few rvm haters out there who find it to be over-engineered and trying to do too much. If that&amp;#8217;s you, there is another, more lightweight tool called &lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;rbenv&lt;/a&gt; that you can use and if you really like separate gemsets, someone has written &lt;a href=&quot;https://github.com/jamis/rbenv-gemset&quot;&gt;rbenv-gemset&lt;/a&gt; to go with it. I have a handful of projects already set up with rvm, so I&amp;#8217;m going to keep using it for now.&lt;/p&gt;

&lt;p&gt;Installing rvm itself is pretty easy. The &lt;a href=&quot;http://beginrescueend.com/&quot;&gt;rvm homepage&lt;/a&gt; gives a quick install command:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;bash &amp;lt; &amp;lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;and then add this to your shell profile:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; . &quot;$HOME/.rvm/scripts/rvm&quot;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;That works fine. Now it&amp;#8217;s time to install some rubies - at the moment I have projects using 1.8.7 and 1.9.2, and I&amp;#8217;d like to use 1.9.3 going forward. I used the following command and got an error:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;rvm install 1.8.7
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&#8230;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;ERROR: There has been an error while running configure. Halting the installation.&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;It turns out this is a common issue in OS X Lion because gcc is just a sym link to LLVM, and the whole installation gets a bit confused (that&amp;#8217;s the technical term for it). I read on &lt;a href=&quot;http://www.mattpolito.info/post/9383196211/rvm-ruby-install-on-lion-got-you-down&quot;&gt;Matt Polito&amp;#8217;s blog&lt;/a&gt; that you can simply point the CC environment variable straight to GCC 4.2 like this:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;CC=/usr/bin/gcc-4.2 rvm install &amp;lt;ruby version&amp;gt;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;That didn&amp;#8217;t work for me. I&amp;#8217;m using a brand new machine with Xcode 4.2 installed. It turns out this solution worked for Xcode 4.1 but 4.2 does not install the right gcc to use. One solution I saw was to roll back to Xcode 4.1 and then install Xcode 4.2 again. That seemed like it would take a while, so I used the standalone OS X GCC installer from https://github.com/kennethreitz/osx-gcc-installer. After that, installing different Rubies worked fine. I&amp;#8217;m hoping that installing gcc like this doesn&amp;#8217;t mess up my Xcode 4.2. So far so good, the few Xcode projects I&amp;#8217;ve tried still compile and run fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; I think next time I will try the approach mentioned by &lt;a href=&quot;https://twitter.com/tonyarnold&quot;&gt;Tony Arnold&lt;/a&gt; in the comments below, using the &lt;code&gt;&#8211;with-gcc=clang&lt;/code&gt; option to rvm, something like this:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;rvm install 1.9.3 &#8211;reconfigure &#8211;debug -C &#8211;enable-pthread &#8211;with-gcc=clang&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;

</content>
  </entry>
  
  <entry>
    <title>Enabling Accessibility Programatically on iOS Devices</title>
    <link href="http://sgleadow.github.com/blog/2011/11/16/enabling-accessibility-programatically-on-ios-devices/"/>
    <updated>2011-11-16T08:29:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/11/16/enabling-accessibility-programatically-on-ios-devices</id>
    <content type="html">&lt;p&gt;I wrote a recent post on &lt;a href=&quot;http://sgleadow.github.com/blog/2011/10/14/enabling-accessibility-for-ios-applications/&quot;&gt;enabling accessibility for iOS applications&lt;/a&gt;, which ended with a snippet of code for automatically enabling accessibility on the iOS simulator. This is essential if you want to have your tests running on a continuous integration server, since the accessibility inspector is off by default.&lt;/p&gt;

&lt;p&gt;I hadn&amp;#8217;t yet found a solution for enabling accessibility on the device. We need accessibility turned on so that we can access the UIAccessibility values that we use in automated functional tests in one of the &lt;a href=&quot;http://sgleadow.github.com/blog/2011/10/26/which-automated-ios-testing-tool-to-use/&quot;&gt;common automated testing tools&lt;/a&gt;. My solution up until now has been to turn VoiceOver on, which is a real pain. Since I sometimes use screenshot-based regression tests, VoiceOver breaks the tests since it visually highlights the selected item.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/#!/0xced&quot;&gt;Cedric Luthi&lt;/a&gt; commented on my previous post that it may be possible to modify his code to also enable accessibility on the device. I wasn&amp;#8217;t sure how that would work with the app sandbox, and whether it was an application or system preference setting. Last night I gave it a try, and amazingly it worked.&lt;/p&gt;

&lt;p&gt;I wrote a simple application based on the master-detail iPhone template in Xcode 4, and wrote a quick &lt;a href=&quot;https://github.com/square/KIF&quot;&gt;KIF&lt;/a&gt; test that checked a label on the master screen, pushed through to the detail screen and checked a label there also. It&amp;#8217;s a gimmick test, but enough that it will fail if accessibility is &lt;em&gt;not&lt;/em&gt; enabled because none of the labels will be available to the test.&lt;/p&gt;

&lt;p&gt;After following the standard KIF set up instructions, I write the following test:&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;6&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;7&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;8&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;9&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;10&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;11&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializeScenarios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;KIFTestScenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadScreen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KIFTestScenario&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;scenarioWithDescription:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Test app loads up on correct screen&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadScreen&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addStep:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KIFTestStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stepToWaitForViewWithAccessibilityLabel:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Master&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addScenario:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;KIFTestScenario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigateToDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KIFTestScenario&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;scenarioWithDescription:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Test can navigate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigateToDetails&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addStep:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KIFTestStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stepToTapViewWithAccessibilityLabel:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Detail&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigateToDetails&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addStep:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KIFTestStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stepToWaitForViewWithAccessibilityLabel:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Detail view content goes here&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addScenario:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigateToDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;That works fine on the simulator, whether you have explicitly enabled accessibility or not now that the maintainers of KIF have merged in &lt;a href=&quot;https://github.com/square/KIF/pull/78&quot;&gt;my pull request&lt;/a&gt;. That code only runs for the simulator, and does nothing if &lt;code&gt;IPHONE_SIMULATOR_ROOT&lt;/code&gt; is not available in the &lt;code&gt;[[NSProcessInfo processInfo] environment]&lt;/code&gt;. The KIF test will only run on the device (at least for me) if I turned VoiceOver on, which is a pain and not possible to automate.&lt;/p&gt;

&lt;p&gt;I modified the code so that on the device, it does not try to prepend the simulator root when running on the device, and points to &lt;code&gt;@&quot;/System/Library/PrivateFrameworks/AppSupport.framework/AppSupport&quot;&lt;/code&gt; directly. Amazingly, the KIF test then worked and all accessibility values were available to the tests. The updated code to enable accessibility programmatically on the device or the simulator looks like this:&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;6&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;7&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;8&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;9&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;10&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;11&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;12&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;13&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;14&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;15&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;16&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;17&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;18&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;19&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;20&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;21&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;22&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;23&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;24&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;25&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;26&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_enableAccessibilityInSimulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;NSAutoreleasePool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoreleasePool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSAutoreleasePool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appSupportLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;/System/Library/PrivateFrameworks/AppSupport.framework/AppSupport&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSProcessInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulatorRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;objectForKey:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;IPHONE_SIMULATOR_ROOT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulatorRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;n&quot;&gt;appSupportLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulatorRoot&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringByAppendingString:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appSupportLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appSupportLibrary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appSupportLocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileSystemRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTLD_LAZY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;CFStringRef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copySharedResourcesPreferencesDomainForDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFStringRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appSupportLibrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;CPCopySharedResourcesPreferencesDomainForDomain&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copySharedResourcesPreferencesDomainForDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;n&quot;&gt;CFStringRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessibilityDomain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copySharedResourcesPreferencesDomainForDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.apple.Accessibility&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessibilityDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;            &lt;span class=&quot;n&quot;&gt;CFPreferencesSetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ApplicationAccessibilityEnabled&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCFBooleanTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessibilityDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCFPreferencesAnyUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCFPreferencesAnyHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;            &lt;span class=&quot;n&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessibilityDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoreleasePool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;I&amp;#8217;m a little bit unsure of the security of this, and whether you actually want your tests messing with your phones system settings on the device - but I usually have separate test devices to my personal phone, and the KIF code is never part of the actual production app that you submit to Apple, so I&amp;#8217;m comfortable with it for now. I&amp;#8217;m hoping this combined with my &lt;a href=&quot;http://sgleadow.github.com/blog/2011/11/05/installing-ios-apps-on-the-device-from-the-command-line&quot;&gt;recent work with fruitstrap&lt;/a&gt; could get us all the way to functional tests running on a physical device in CI.&lt;/p&gt;

&lt;p&gt;You can find this code in &lt;a href=&quot;https://github.com/sgleadow/KIF&quot;&gt;my fork of KIF&lt;/a&gt;, and I&amp;#8217;m hoping after a bit of testing it can be merged into the main KIF repo, so I sent them &lt;a href=&quot;https://github.com/square/KIF/pull/93&quot;&gt;this pull request&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Installing iOS Apps on the Device From the Command Line</title>
    <link href="http://sgleadow.github.com/blog/2011/11/05/installing-ios-apps-on-the-device-from-the-command-line/"/>
    <updated>2011-11-05T10:50:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/11/05/installing-ios-apps-on-the-device-from-the-command-line</id>
    <content type="html">&lt;p&gt;One of the reasons I run most of my tests in the simulator is that it is easy to install and run applications automatically from the command line with tools like &lt;a href=&quot;https://github.com/Fingertips/ios-sim&quot;&gt;ios-sim&lt;/a&gt;. Being able to run your tests from the command line make s it simple to set up continuous integration. I&amp;#8217;ve used an Applescript to drive iTunes back in Xcode 3 days but it just felt wrong.&lt;/p&gt;

&lt;p&gt;The most recent functional testing tool I&amp;#8217;ve been playing with is Apple&amp;#8217;s own &lt;em&gt;UIAutomation&lt;/em&gt;, which runs within the Instruments app. I&amp;#8217;ll write more about that separately, but let&amp;#8217;s just say I don&amp;#8217;t think it&amp;#8217;s an ideal testing tool, especially if TDD and CI are important to you. Some details are in my &lt;a href=&quot;http://sgleadow.github.com/blog/2011/10/30/adding-unit-tests-to-an-existing-ios-project&quot;&gt;comparison of a few functional testing tools&lt;/a&gt;. The &lt;code&gt;instruments&lt;/code&gt; command line tool does not seem to install the app on the device before running tests, which means you still need to use Xcode to manually install the app. Enter &lt;code&gt;fruitstrap&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Fruitstrap&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ghughes/fruitstrap&quot;&gt;Fruitstrap&lt;/a&gt; is a command line tool that uses the private MobileDevice API to install an iOS application on a physical device over USB. It&amp;#8217;s pretty easy to get set up.&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;git clone git://github.com/ghughes/fruitstrap.git
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;cd fruitstrap
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;make fruitstrap&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Fruitstrap comes with a demo applicaiton, which you can compile and install on a device using &lt;code&gt;make install&lt;/code&gt;. I actually had a few issues getting the demo app to work, but I did get it working for actual sample applications. You now have the &lt;code&gt;fruitstrap&lt;/code&gt; command compiled and ready to go - if you want to access the command from anywhere you probably want to add it to you path, or sym link it to &lt;code&gt;/usr/local/bin&lt;/code&gt; or however you like to tinker with your machine.&lt;/p&gt;

&lt;h2&gt;Building from the command line&lt;/h2&gt;

&lt;p&gt;I made a little sample application to play around with &lt;code&gt;fruitstrap&lt;/code&gt; and scripting on my &lt;a href=&quot;https://github.com/sgleadow&quot;&gt;github&lt;/a&gt;, in a project called &lt;a href=&quot;https://github.com/sgleadow/fruitstrap-demo&quot;&gt;fruitstrap-demo&lt;/a&gt;. It&amp;#8217;s just a simple Single View Application with a couple of labels so you know it&amp;#8217;s the right app. To get the repository:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone git://github.com/sgleadow/fruitstrap-demo.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Just to make sure everything is working, open up the project in Xcode and build and run to your device. If that doesn&amp;#8217;t work, fruitstrap isn&amp;#8217;t going to help you much. The &lt;code&gt;xcodebuild&lt;/code&gt; command allows us to build our iOS apps from the command line fairly easily. The command I used was:&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;xcodebuild -scheme fruitstrap-demo -sdk iphoneos build&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Remember to use the &lt;code&gt;iphoneos&lt;/code&gt; so that it builds your app for the device. Note, I originally tried this with the old &lt;em&gt;target&lt;/em&gt; settings for &lt;code&gt;xcodebuild&lt;/code&gt;, but it turned out I needed to use schemes for reasons explained below. The app will be built to &lt;code&gt;build/Debug-iphoneos/fruitstrap-demo.app&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Try out fruitstrap&lt;/h2&gt;

&lt;p&gt;Now we have an application build on the command line, let&amp;#8217;s make sure fruitstrap works for our app. Make sure to remove your sample app from the device beforehand so you know it&amp;#8217;s working. Then use the &lt;code&gt;xcodebuild&lt;/code&gt; command above to compile the app so it&amp;#8217;s ready to go, and make sure you know the full path to fruitstrap, or you&amp;#8217;ve put fruitstrap on your path.&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;fruitstrap build/Debug-iphoneos/fruitstrap-demo.app&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;You should see a bunch of output and progress information finishing with the magic &lt;code&gt;[100%] Installed package build/Debug-iphoneos/fruitstrap-demo.app&lt;/code&gt;, and in a few moments, the app appears in &lt;em&gt;Springboard&lt;/em&gt; on your phone. That&amp;#8217;s pretty cool - I&amp;#8217;ve been trying to find a solution for installing on the device like that for a long time!&lt;/p&gt;

&lt;p&gt;If you have more than one device plugged in (which is usually the case on a mobile continuous integration server), you&amp;#8217;ll need to also specify the device id.&lt;/p&gt;

&lt;h2&gt;Scripting the fruitstrap installation&lt;/h2&gt;

&lt;p&gt;My next goal is to write a little shell script that we can integrate into a build phase in Xcode, so that we don&amp;#8217;t have to hard code the path &lt;code&gt;build/Debug-iphoneos&lt;/code&gt; into out shell script. I immediately reached for the Build Phases tab of the fruitstrap-demp target to optionally run the fruitstrap install code. However, these shell scripts seem to get called &lt;em&gt;before&lt;/em&gt; the code signing is run, in which case, installing to the device will fail.&lt;/p&gt;

&lt;p&gt;I found out from &lt;a href=&quot;http://stackoverflow.com/questions/1409981/how-to-run-a-script-after-xcode-runs-codesign-on-my-iphone-app&quot;&gt;this stackoverflow thread&lt;/a&gt; that you can run pre and post scripts for a scheme. This allows us to hook up a shell script to run fruitstrap &lt;em&gt;after&lt;/em&gt; the code signing.&lt;/p&gt;

&lt;p&gt;There is only one scheme in the sample project, so select &lt;em&gt;Edit Scheme&amp;#8230;&lt;/em&gt;, and select the &lt;em&gt;Build&lt;/em&gt; action from the list on the left hand side. There are no actions at the moment, so press the &lt;strong&gt;+&lt;/strong&gt; button and add a &lt;em&gt;Run Script Action&lt;/em&gt;. Since we need to know where our target has been compiled, make sure that the &lt;em&gt;provide build settings from&lt;/em&gt; option is set to &lt;em&gt;fruitstrap-demo&lt;/em&gt;, as show in the following screenshot.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#8221; src=&#8217;http://sgleadow.github.com/images/posts/fruitstrap/fruitstrap-scheme-post-script.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Running a script in the post action for a scheme&#8217; title=&#8217;Running a script in the post action for a scheme&#8217;&gt;&lt;/p&gt;

&lt;p&gt;The actual script code is shown below. It only runs if the &lt;code&gt;FRUITSTRAP_CLI&lt;/code&gt; environment variable is set, since most of the time we don&amp;#8217;t want Xcode to be using this third party tool to install on the device. We only need it to run when running from the command line as part of our continuous integration build. It seems the scheme scripts do not get run in the same working directory as you run xcodebuild, so our script makes sure to change to SRCROOT before running fruitstrap.&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;6&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;7&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;8&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;9&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;10&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;11&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;12&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;13&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;14&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;15&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;# Do nothing unless we are running from the command line
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;if [ &quot;$FRUITSTRAP_CLI&quot; = &quot;&quot; ]; then
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;exit 0
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;fi
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;echo &quot;******************&quot;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;echo &quot;Installing app to device using fruitstrap&#8230;&quot;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;echo &quot;Workspace location: $SRCROOT&quot;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;echo &quot;Install location: $TARGET_BUILD_DIR/$FULL_PRODUCT_NAME&quot;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;echo &quot;******************&quot;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;cd $SRCROOT
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;fruitstrap $TARGET_BUILD_DIR/$FULL_PRODUCT_NAME
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;echo &quot;******************&quot;&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Check that when you run the xcodebuild example above that it &lt;em&gt;does not&lt;/em&gt; run fruitstrap, since we don&amp;#8217;t want it to in that normal operation. Now, try building the scheme with the environment variable set and check that it does in fact build and install to the device.&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;FRUITSTRAP_CLI=1 xcodebuild -scheme fruitstrap-demo -sdk iphoneos build&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Done. One command to build and install the app on the device.&lt;/p&gt;

&lt;h2&gt;More about fruitstrap&lt;/h2&gt;

&lt;p&gt;There is more information about fruitstrap on &lt;a href=&quot;https://github.com/ghughes/fruitstrap&quot;&gt;its github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One extra feature fruitstrap has is to be able to launch the application and attach a debugger, by using the &lt;code&gt;-d&lt;/code&gt; option. I&amp;#8217;ve had mixed success with this feature, it doesn&amp;#8217;t always work for me. I&amp;#8217;m not sure how much use it is to me anyway if the point of this is running in CI.&lt;/p&gt;

&lt;figure role=code&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8221;&gt;&lt;div class=&#8217;line&#8217;&gt;fruitstrap -d build/Debug-iphoneos/fruitstrap-demo.app&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Now we can build the application and install it on the device from the command line. From here, the next step is to hook it up to the &lt;code&gt;instruments&lt;/code&gt; command line interface. Massive thanks to &lt;a href=&quot;https://twitter.com/#!/heardrwt&quot;&gt;Richie&lt;/a&gt; for letting me know about fruitstrap.&lt;/p&gt;

&lt;p&gt;Ideally, I would like to be able to boot the app on the device &lt;em&gt;without&lt;/em&gt; being hooked into the debugger. I&amp;#8217;m not sure if this is possible, I certainly haven&amp;#8217;t got it working with fruitstrap yet - and the hairy C code isn&amp;#8217;t making me want to jump in and try just yet. What we have now is enough to get UIAutomation up and running, since &lt;code&gt;instruments&lt;/code&gt; will boot the app when the tests start. However, I&amp;#8217;d prefer to use Frank or KIF in which case I need to find a way to boot onto the device.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Adding Unit Tests to an Existing iOS Project</title>
    <link href="http://sgleadow.github.com/blog/2011/10/30/adding-unit-tests-to-an-existing-ios-project/"/>
    <updated>2011-10-30T16:30:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/10/30/adding-unit-tests-to-an-existing-ios-project</id>
    <content type="html">&lt;p&gt;I recently came across a post from the guys at &lt;a href=&quot;http://twobitlabs.com&quot;&gt;Two Bit Labs&lt;/a&gt; on &lt;a href=&quot;http://twobitlabs.com/2011/06/adding-ocunit-to-an-existing-ios-project-with-xcode-4/&quot;&gt;Adding Unit Tests to an existing iOS project&lt;/a&gt; with Xcode 4.&lt;/p&gt;

&lt;p&gt;I always include unit tests by default in any project that is more than a demo, but up until recently I have always used &lt;a href=&quot;https://github.com/gabriel/gh-unit&quot;&gt;GHUnit&lt;/a&gt;. &lt;a href=&quot;http://twitter.com/#!/makdad&quot;&gt;Mark Makdad&lt;/a&gt; wrote a piece earlier in the year &lt;a href=&quot;http://longweekendmobile.com/2011/04/15/unit-testing-in-xcode-4-use-ocunit-and-sentest-instead-of-ghunit&quot;&gt;comparing GHUnit and OCUnit&lt;/a&gt;. That post combined with &lt;a href=&quot;https://github.com/allending/Kiwi&quot;&gt;Kiwi&lt;/a&gt;&amp;#8217;s Rspec-style wrappers around OCUnit has made me consider using Apple&amp;#8217;s built in unit testing again.&lt;/p&gt;

&lt;p&gt;I worked through the post from Two Bit Labs to add a unit test target to an existing project, which all worked fine. Xcode automatically added a new scheme for my new unit test target that only had the &lt;em&gt;Test&lt;/em&gt; build action hooked up. This isn&amp;#8217;t exactly what I wanted. Ideally, I want to run my unit tests without changing the current scheme, and just press &lt;code&gt;Cmd + U&lt;/code&gt; or select &lt;code&gt;Product &amp;gt; Test&lt;/code&gt; from the menu.&lt;/p&gt;

&lt;h2&gt;Adding the test action to an existing scheme&lt;/h2&gt;

&lt;p&gt;When I select my target, called &lt;em&gt;Development&lt;/em&gt;, that option is greyed out. I have a number of targets set up for this project, so perhaps for simple projects Xcode sorts it out for you&amp;#8230; but here is what I had to do in order to get my unit tests hooked up to my main Development target&amp;#8217;s scheme.&lt;/p&gt;

&lt;p&gt;Select your main target&amp;#8217;s scheme in the little scheme selector in the Xcode toolbar, and choose &lt;em&gt;Edit Scheme&amp;#8230;&lt;/em&gt; from the drop down menu. When you select the &lt;em&gt;Test&lt;/em&gt; build action on the left, you&amp;#8217;ll notice no tests appear in the list. Tap the &lt;em&gt;+&lt;/em&gt; button at the bottom edge of the table, which should show a list of available test bundles (I had a whole lot to choose from because my project has the unfortunate privilege of still including Three20). Choose the unit test bundle you just created you just created and press &lt;em&gt;Add&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#8221; src=&#8217;http://sgleadow.github.com/images/posts/adding-unit-tests/adding-test-action-to-scheme.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Adding tests to the scheme&#8217;s test action&#8217; title=&#8217;Adding tests to the scheme&#8217;s test action&#8217;&gt;&lt;/p&gt;

&lt;p&gt;You should see the test bundle appear in the table, as shown in the image above. Tap on the &lt;em&gt;Build&lt;/em&gt; action for this scheme, and you will notice that there are now two targets lists: our application and our unit tests. The tests are only linked up to the &lt;em&gt;Test&lt;/em&gt; build action by default, which should look similar to the image below.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#8221; src=&#8217;http://sgleadow.github.com/images/posts/adding-unit-tests/test-build-action.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Checking the two targets in the build action&#8217; title=&#8217;Checking the two targets in the build action&#8217;&gt;&lt;/p&gt;

&lt;h2&gt;Running your unit tests&lt;/h2&gt;

&lt;p&gt;Now that your unit tests are hooked up to your test build action, select your main target&amp;#8217;s scheme. The menu item &lt;code&gt;Product &amp;gt; Test&lt;/code&gt; should now be active. Select &lt;em&gt;Test&lt;/em&gt;, and Xcode will build your application and run your tests. When creating the test bundle, Apple&amp;#8217;s default test case includes a failure, so if the tests run, you will see that failure.&lt;/p&gt;

&lt;p&gt;Just to double check you&amp;#8217;ve got all your target dependencies set up correctly, try a full clean (hold &lt;em&gt;Option&lt;/em&gt; while selecting &lt;code&gt;Product &amp;gt; Clean&lt;/code&gt;) and then press &lt;em&gt;Cmd + U&lt;/em&gt;. This should trigger a full build and run the unit tests and show your test failure again.&lt;/p&gt;

&lt;p&gt;If you see an error like &lt;code&gt;ld: file not found:&lt;/code&gt; &lt;code&gt;&amp;lt;path to app&amp;gt;/Debug-iphonesimulator/Development.app/Development&lt;/code&gt;, it&amp;#8217;s likely your test target does not automatically build your main application under test, as explained in the &lt;a href=&quot;http://twobitlabs.com/2011/06/adding-ocunit-to-an-existing-ios-project-with-xcode-4/&quot;&gt;original article&lt;/a&gt;: select your project in the navigator, select your unit test target, open the &lt;em&gt;Build Phases&lt;/em&gt; tab and add your app target as a dependency. Ending up with something like the image shown.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#8221; src=&#8217;http://sgleadow.github.com/images/posts/adding-unit-tests/test-target-dependency.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Setting up dependencies for your test target&#8217; title=&#8217;Setting up dependencies for your test target&#8217;&gt;&lt;/p&gt;

&lt;p&gt;Now&amp;#8230; do I use this approach and start convert all my unit tests slowly from GHUnit to OCUnit? I think I might leave existing projects on GHUnit, and just use OCUnit for new tests.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Universal Static Libraries and Frameworks for iOS</title>
    <link href="http://sgleadow.github.com/blog/2011/10/28/universal-static-libraries-and-frameworks-for-ios/"/>
    <updated>2011-10-28T17:48:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/10/28/universal-static-libraries-and-frameworks-for-ios</id>
    <content type="html">&lt;p&gt;You only have to look at github to see the explosion of new open source iOS frameworks. Incorporating third party libraries into your app is still a pain. I spent today fighting with static libraries and frameworks for the &lt;a href=&quot;https://github.com/domesticcatsoftware/DCIntrospect&quot;&gt;DCIntrospect&lt;/a&gt; library, and I think I won, so that&amp;#8217;s got to be work writing about.&lt;/p&gt;

&lt;p&gt;The changes I made can be see on &lt;a href=&quot;https://github.com/sgleadow/DCIntrospect&quot;&gt;my fork of DCIntrospect&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Static libraries and frameworks&lt;/h2&gt;

&lt;p&gt;Until recently, my default use case was to actually drag in the source files from a third party library and compile it into my application. For libraries that I have forked and plan to modify or extend, this would still be my preferred option. Some third party libraries are stable and reliable, and I do not wish to change the source code at all. For these tools, I would prefer to just drag in a static library or framework and get on with my own app.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve tried my hand at static libraries before, and it definitely wasn&amp;#8217;t plain sailing. A twitter conversation between two local iOS devs, &lt;a href=&quot;http://twitter.com/#!/patr&quot;&gt;Pat&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/#!/orj&quot;&gt;Oliver&lt;/a&gt; prompted me to have another go at getting these libraries working. Pat&amp;#8217;s own tool, &lt;a href=&quot;https://github.com/domesticcatsoftware/DCIntrospect&quot;&gt;DCIntrospect&lt;/a&gt; is a perfect example. It&amp;#8217;s a great tool for introspecting and testing strange UI layout behaviour in your app, and it&amp;#8217;s a library that &lt;em&gt;just works&lt;/em&gt; (famous last words, I bet you find a bug in it now)&amp;#8230; but credit to Pat, I&amp;#8217;ve used it on a few apps, and never touched the source code. DCIntrospect seems like a good case for bundling everything up in a library.&lt;/p&gt;

&lt;h2&gt;Static Library&lt;/h2&gt;

&lt;p&gt;I created an  Xcode 4 workspace for DCIntrospect, which initially just contained the existing &lt;em&gt;DCIntrospectDemo&lt;/em&gt;. The demo included the source code directly, so I removed the references to those files and created a new static library project that included the existing DCIntrospect source files. That basically compiled straight away, but to make it useful, I had to tweak a few build settings.&lt;/p&gt;

&lt;p&gt;The target name is DCIntrospectStaticLib, but I wanted the output to be libDCIntrospect.a, which can be done by changing the &lt;strong&gt;Product Name&lt;/strong&gt; build setting. I also wanted to group the header files with the compiled binary, so I set the &lt;strong&gt;Public Headers Folder Path&lt;/strong&gt; to be &lt;code&gt;$(PRODUCT_NAME)&lt;/code&gt; so that it would match whatever I entered for the product name.&lt;/p&gt;

&lt;p&gt;To link to this static library, you simply have to drag it into your project. Xcode sorts out adjusting the &lt;strong&gt;Library Search Paths&lt;/strong&gt; automatically when you add the library. However, if you want to import headers and make calls to the library, you will need to manually set the &lt;strong&gt;Header Search Paths&lt;/strong&gt;. For DCIntrospectDemo, the search path is &lt;code&gt;&quot;$(SRCROOT)/../Products/lib&quot;&lt;/code&gt; and then use &lt;code&gt;#import &amp;lt;DCIntrospect/DCIntrospect.h&amp;gt;&lt;/code&gt;. That&amp;#8217;s easy enough to do, but it is one more barrier to entry for people using the library. A static framework could make it a single step.&lt;/p&gt;

&lt;h2&gt;Static Framework&lt;/h2&gt;

&lt;p&gt;I followed the steps described in &lt;a href=&quot;http://twitter.com/#!/dineybomfim&quot;&gt;Diney Bomfim&amp;#8217;s&lt;/a&gt; updated post on building a &lt;a href=&quot;http://db-in.com/blog/2011/07/universal-framework-iphone-ios-2-0/&quot;&gt;universal framework for iPhone&lt;/a&gt;, and it all went pretty smoothly. He describes the different build settings you have to adjust to get it all to work.&lt;/p&gt;

&lt;p&gt;Diney&amp;#8217;s instructions also include a sample shell script for compiling a universal static library using the &lt;code&gt;lipo&lt;/code&gt; tool. I adjusted the script slightly, so that it would build both a universal static library as well as the static framework. I haven&amp;#8217;t had much success running DCIntrospect on the device, so I&amp;#8217;m not sure if that part is working or not.&lt;/p&gt;

&lt;p&gt;The joy of using the static framework in this way is that installing DCIntrospect is now a single drag and drop of a framework into your source code. To get it working at this point, you would still need to add &lt;code&gt;#import &amp;lt;DCIntrospect/DCIntrospect.h&amp;gt;&lt;/code&gt; into your app delegate and after you have loaded the window, call &lt;code&gt;[[DCIntrospect sharedIntrospector] start]&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Automatic Loading of DCIntrospect&lt;/h2&gt;

&lt;p&gt;My next task is to get DCIntrospect to automatically load if it is linked to your target. I had a play around with this a few months ago with the &lt;a href=&quot;https://github.com/moredip/Frank&quot;&gt;Frank iOS testing library&lt;/a&gt;, with some success but never pursued the final solution, but &lt;a href=&quot;http://twitter.com/#!/beingagile&quot;&gt;Pete Hodgson&lt;/a&gt; obviously got sick of waiting for me and did it himself.&lt;/p&gt;

&lt;p&gt;The solution is pretty neat. You basically hook into when a class in the library is being loaded, and set yourself up to listen for the &lt;code&gt;UIApplicationDidBecomeActiveNotification&lt;/code&gt; notification, which gets called after the app delegate &lt;code&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&lt;/code&gt; gets called. When that happens, we start DCIntrospect. I&amp;#8217;ve wrapped the call to load DCIntrospect in a check that we are running in the simulator, so it will never be called on the app we submit to Apple. Initially I tried to do a check using &lt;code&gt;#ifdef DEBUG&lt;/code&gt;, but that wont work with the static precompiled library approach, since those flags are only valid when the library is initially compiled, not at run time.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;6&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;7&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;8&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;9&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;10&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;11&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;12&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;13&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;14&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;15&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;16&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;17&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;18&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;19&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;20&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;21&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;22&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;23&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;24&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;25&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;26&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;27&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;28&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;29&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;quot;DCIntrospect.h&amp;quot;&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DCIntrospectLoader&lt;/span&gt; : &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DCIntrospectLoader&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;c1&quot;&gt;// This is called after application:didFinishLaunchingWithOptions:&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;c1&quot;&gt;// so the statusBarOrientation should be reported correctly&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;applicationDidBecomeActive:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulatorRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSProcessInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;objectForKey:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;IPHONE_SIMULATOR_ROOT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulatorRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Running in simulator, loading DCIntrospect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DCIntrospect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedIntrospector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Injecting DCIntrospect loader&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addObserver:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;                                             &lt;span class=&quot;nl&quot;&gt;selector:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;applicationDidBecomeActive:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;                                                 &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;UIApplicationDidBecomeActiveNotification&amp;quot;&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;                                               &lt;span class=&quot;nl&quot;&gt;object:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;With the auto loading class above now part of DCIntrospect, installation is literally a single drag and drop of the framework. It will automatically load as needed, as long as we are running in the simulator. I usually have a separate target for App Store submission without any test libraries linked into it just in case, since they bloat the binary and probably call some private API magic at some point.&lt;/p&gt;

&lt;h2&gt;DCIntrospect Demo Project&lt;/h2&gt;

&lt;p&gt;To use either the static library or the framework in the two demo project targets, the only change I had to make was to add the &lt;em&gt;-ObjC&lt;/em&gt; setting to &lt;strong&gt;Other Linker Flags&lt;/strong&gt;. For the static library, you still need to set a header path but only if you want to make direct calls to DCIntrospect, since it now loads automatically.&lt;/p&gt;

&lt;p&gt;Since I had both the DCIntrospect and DCIntrospectDemo projects in the same workspace, XCode 4 had the smarts to find the &lt;em&gt;implicit dependency&lt;/em&gt;, so when I edit the library source code, it&amp;#8217;s automatically rebuilt. However, I set up the project to use the &lt;em&gt;BundleProducts&lt;/em&gt; target to create the universal distributable binaries, which did not get picked up as a dependency.&lt;/p&gt;

&lt;p&gt;You can create &lt;em&gt;explicit dependencies&lt;/em&gt; between targets in different projects by first creating a project dependency. That is, dragging the dependent project into the demo project. Once that is done, when editing the &lt;strong&gt;Target Dependencies&lt;/strong&gt; in the demo target&amp;#8217;s &lt;em&gt;Build Phases&lt;/em&gt;, you will be able to explicitly select the dependency. In this case, it is the &lt;em&gt;BundleProducts&lt;/em&gt; target.&lt;/p&gt;

&lt;p&gt;Unless you plan to edit the source code and recompile the binary often, the chances are you wont need to set up the project dependencies like this.&lt;/p&gt;

&lt;h2&gt;Issues with static libraries and frameworks&lt;/h2&gt;

&lt;p&gt;DCIntrospect is a fairly simple framework to generate. Larger libraries are likely to come across two issues, neither of which affect DCIntrospect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;categories from static libraries don&amp;#8217;t seem to load properly&lt;/li&gt;
&lt;li&gt;resources is static libraries or frameworks need to be linked into the target using them separately&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the categories issue, I know if two solutions. First, you can add &lt;em&gt;-all_load&lt;/em&gt; to the &lt;strong&gt;Other Linker Flags&lt;/strong&gt; section of the target using the static library. We&amp;#8217;ve already added the &lt;em&gt;-ObjC&lt;/em&gt; flag in there, so it&amp;#8217;s not really adding much of a burden. The other option is to use Karl Stenerud&amp;#8217;s &lt;em&gt;MAKE_CATEGORIES_LOADABLE&lt;/em&gt; as &lt;a href=&quot;https://github.com/moredip/Frank/blob/master/LoadableCategory.h&quot;&gt;used in Frank&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the resources issue, you can generate a resource bundle along with your static library or framework. When linking the library to your target, you can also drag in the resources bundle as a dependency and it should work. Karl has a neat way of making this even easier in his &lt;a href=&quot;https://github.com/kstenerud/iOS-Universal-Framework&quot;&gt;iOS Univeral Framework&lt;/a&gt; project in github. He creates an &lt;em&gt;embedded framework&lt;/em&gt;, which is essentially a single container for both the static framework and the resources bundle. This extra container makes it easy to drag in a single &lt;em&gt;.embeddedframework&lt;/em&gt; file into your project and have everything link up correctly.&lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;This is probably the first time I have fought with static libraries and frameworks and felt like I came out on top, and DCIntrospect seems like a good case for using it. That said, there are lots of libraries I use where I prefer being able to see the source code, and potentially edit the implementation. For those, git submodules and adding the source directly is still my preferred option. The single drag-and-drop solution here does make using a new library pretty easy though.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Which Automated iOS Testing Tool To Use</title>
    <link href="http://sgleadow.github.com/blog/2011/10/26/which-automated-ios-testing-tool-to-use/"/>
    <updated>2011-10-26T22:38:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/10/26/which-automated-ios-testing-tool-to-use</id>
    <content type="html">&lt;p&gt;I&amp;#8217;ve been playing around with testing frameworks on iOS for over a year now. There are quite a few out there, all with communities building around them, but I think there are currently a few that stand out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frank&lt;/li&gt;
&lt;li&gt;KIF&lt;/li&gt;
&lt;li&gt;UIAutomation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other tools that might be worth looking at, but I haven&amp;#8217;t used and wont comment on are: NativeDriver, LessPainful, iCuke and UISpec.&lt;/p&gt;

&lt;p&gt;I recently watched a recording of Pete Hodgson (@beingagile), the primary maintainer of Frank in which he gave a quick summary of the other testing tools, and when it might be appropriate to use them. I made a few notes, and added some of my own thoughts. There is a &lt;a href=&quot;http://pivotallabs.com/talks/147-frank-cucumber-tests-for-native-ios-apps&quot;&gt;video of the talk&lt;/a&gt; Pete gave at &lt;a href=&quot;http://pivotallabs.com/&quot;&gt;Pivotal Labs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Frank&lt;/h2&gt;

&lt;p&gt;Frank has been described as Selenium for native iOS apps. It&amp;#8217;s a tool written mainly by some fellow Thoughtworkers that uses a combination of &lt;a href=&quot;http://cukes.info/&quot;&gt;Cucumber&lt;/a&gt; and JSON commands that are sent to a server running inside your native application, and leverages &lt;a href=&quot;http://code.google.com/p/uispec/&quot;&gt;UISpec&lt;/a&gt; to run the commands. Frank used to require changes to your production code, but that&amp;#8217;s got a lot easier with the new static library approach.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve used Frank quite a bit, and I like it. I have a lot more I could say about it, but I&amp;#8217;ll leave that for another time. You can find out more about Frank at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.testingwithfrank.com&quot;&gt;Frank&amp;#8217;s new home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/moredip/Frank&quot;&gt;The github page for Frank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sgleadow.github.com/talks.html&quot;&gt;A slightly out of date talk I gave on Frank&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt; The good parts of Frank &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clean CSS-like selector syntax, allowing for fairly tolerant tests&lt;/li&gt;
&lt;li&gt;Active community discussing and extending the library&lt;/li&gt;
&lt;li&gt;Driven by Cucumber (if you&amp;#8217;re a cuke fan)&lt;/li&gt;
&lt;li&gt;Includes &lt;em&gt;Symbiote&lt;/em&gt;, a live introspection tool&lt;/li&gt;
&lt;li&gt;Command line and CI come pretty much for free&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt; The bad parts of Frank &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Difficult, but not impossible, to run on the device&lt;/li&gt;
&lt;li&gt;Separation between tests/native code over HTTP can confuse the cause of failure&lt;/li&gt;
&lt;li&gt;Decoupling test/native code into separate processes makes it a bit slower (Pete makes the good point that most of the slowness in your iOS tests are likely to be waiting for animations and transitions, not the HTTP communication)&lt;/li&gt;
&lt;li&gt;Very little support for gestures (but hopefully that&amp;#8217;s coming soon)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt; When using Frank might be appropriate &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your team has experience with web application testing tools (Selenium, Cucumber)&lt;/li&gt;
&lt;li&gt;You prefer a BDD style of development, with CI support&lt;/li&gt;
&lt;li&gt;Your app is not driven by complex gestures&lt;/li&gt;
&lt;li&gt;You have a goal of having cross platform tests across Android, iOS and mobile web&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;KIF&lt;/h2&gt;

&lt;p&gt;KIF is an Objective C based framework written at Square. It&amp;#8217;s a nice solid implementation from what I&amp;#8217;ve seen, with active development going on. Since it&amp;#8217;s Objective C, you can call out to anything else in your app as well. It&amp;#8217;s a brand new test framework, so it&amp;#8217;s not going to immediately integrate with other tools (like JUnit-style XML output and that kind of thing). I haven&amp;#8217;t KIF a lot yet, so I can&amp;#8217;t comment too much but I think it shows a lot of promise. You can find out more about KIF at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/square/KIF&quot;&gt;The github repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/group/kif-framework&quot;&gt;KIF Google group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://corner.squareup.com/2011/07/ios-integration-testing.html&quot;&gt;The initial blog post on KIF from Square&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt; The good parts of KIF &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your tests are in Objective C. Everything in one language, easier for pure iOS devs to pick up&lt;/li&gt;
&lt;li&gt;Active community and good support&lt;/li&gt;
&lt;li&gt;Pretty reasonable support for gestures&lt;/li&gt;
&lt;li&gt;Command line and CI&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt; The bad parts of KIF &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your tests are in Objective C. Non-devs will find it hard to read, doesn&amp;#8217;t make a great executable spec)&lt;/li&gt;
&lt;li&gt;Tricky to integrate with back end stubs because it&amp;#8217;s all running in-process&lt;/li&gt;
&lt;li&gt;Not stand alone&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt; When using KIF might be appropriate &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primarily a developer driven team&lt;/li&gt;
&lt;li&gt;Developers have stronger Objective C skills than Ruby/Cucumber/Javascript&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t need business folk to read or write test specs&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t want to deal with the whacky regex from Cucumber&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t have really complex back end interactions to stub out&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t have cross platform requirements&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;UIAutomation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.apple.com/library/ios/#documentation/DeveloperTools/Reference/UIAutomationRef/Introduction/Introduction.html&quot;&gt;UIAutomation&lt;/a&gt; is Apple&amp;#8217;s own solution for automated testing. It runs tests written in Javascript through the Instruments application that comes with the developer tools. It sounds like a no-brainer to use Apple&amp;#8217;s solution for building iOS apps, but I&amp;#8217;ve found it a real pain to deal with in practice. UIAutomation is pretty good for actually driving the UI, but not great for organising and running a test suite, especially from CI. My impression is that Apple QA staff must use UIAutomation for test scripts with profiling instruments attached and actually sit there and watch, it doesn&amp;#8217;t seem to be purpose built for fully automated testing.&lt;/p&gt;

&lt;p&gt;At this point I would like to link to a lot of useful documentation about UIAutomation, but in practice I have found Apple&amp;#8217;s documentation to be either minimal or non-existent, and very little online discussion past the &amp;#8220;boot up an app and tap a button in a single javascript file&amp;#8221;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt; The good parts of UIAutomation &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple&amp;#8217;s own tool. Doing things the way Apple wants is generally a good idea (and as Pete mentions, Apple&amp;#8217;s not going to go bust or quit iOS any time soon, so the chances are it will be supported)&lt;/li&gt;
&lt;li&gt;More closely linked to the device, I primarily run UIAutomation tests on the device, not in the simulator&lt;/li&gt;
&lt;li&gt;Good support for gestures (pinch zooming and swipes) and rotation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt; The bad parts of UIAutomation &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not built with CI in mind. The command line integration is pretty bad&lt;/li&gt;
&lt;li&gt;Can&amp;#8217;t integrate with other tools very well&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s Apple&amp;#8217;s tool, and it&amp;#8217;s not open source. You can&amp;#8217;t jump in and fix the bits that are missing&lt;/li&gt;
&lt;li&gt;Runs within Instruments, seems to be aimed at regression testing not TDD and aimed at QAs not devs&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt; When using UIAutomation might be appropriate &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have a separation between development and QA on your team&lt;/li&gt;
&lt;li&gt;You prefer regression test suites over a test-first approach&lt;/li&gt;
&lt;li&gt;You don&amp;#8217;t really care about CI&lt;/li&gt;
&lt;li&gt;You prefer manual QA and you just want to speed that up a bit&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So far I&amp;#8217;ve used Frank and UIAutomation on fairly large projects, and I&amp;#8217;m very keen to try KIF. Ideally what I would like is the Frank architecture using Cucumber to drive your tests, but using KIF&amp;#8217;s implementation on the native side which is a lot more solid than UISpec. Frank would give nice clean readable test features, and integration with other tools through cucumber as well as the concise selector syntax. KIF would give gesture support and a much cleaner implementation of those features.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Enabling Accessibility for iOS applications</title>
    <link href="http://sgleadow.github.com/blog/2011/10/14/enabling-accessibility-for-ios-applications/"/>
    <updated>2011-10-14T16:24:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/10/14/enabling-accessibility-for-ios-applications</id>
    <content type="html">&lt;p&gt;I&amp;#8217;m looking to write up a few posts about using accessibility for testing native iOS applications. Here is the first one, dealing with enabling accessibility for your apps in the simulator and on the device.&lt;/p&gt;

&lt;h2&gt;Why use accessibility&lt;/h2&gt;

&lt;p&gt;Firstly, the iPhone and iPad are setting a new standard for usability by impaired users. That&amp;#8217;s a great thing, and I think we should be making a bigger effort to support these features. Apple provides assistants like VoiceOver that use the building UIAccessibility framework. If you&amp;#8217;d like to find out more about accessibility for the sake of accessibility, &lt;a href=&quot;http://mattgemmell.com/2010/12/19/accessibility-for-iphone-and-ipad-apps/&quot;&gt;Matt Gemmell&lt;/a&gt; has a great post on the topic&lt;/p&gt;

&lt;p&gt;A great side effect of making an app accessible to assistive devices is that the app also becomes easier to test in an automated fashion. This post is not about how and why to use accessibility to test your app (although that is a valid topic that I will write a separate post on), it a quick guide to turning accessibility on. Generally, the properties of the UIAccessibilty framework are only available to third party testing tools like &lt;a href=&quot;http://www.testingwithfrank.com/&quot;&gt;Frank&lt;/a&gt; and &lt;a href=&quot;https://github.com/square/KIF&quot;&gt;KIF&lt;/a&gt; if you have accessibility enabled for the application, either in the simulator or on the device.&lt;/p&gt;

&lt;h2&gt;Enabling accessibility in the Simulator&lt;/h2&gt;

&lt;p&gt;During development, we need to enable accessibility for both OS X and the iOS Simulator. Under Mac OS X, open up the System Preferences and open the &lt;em&gt;Universal Access&lt;/em&gt; pane at the top right. In the pane that opens, check the box for &lt;em&gt;Enable Access for Assistive Devices&lt;/em&gt;. The OS will persist this setting from now on.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#8221; src=&#8217;http://sgleadow.github.com/images/posts/accessibility/osx-prefs.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Universal Access in the OS X Preferences&#8217; title=&#8217;Universal Access in the OS X Preferences&#8217;&gt;
&lt;img class=&#8221; src=&#8217;http://sgleadow.github.com/images/posts/accessibility/enable-osx-prefs.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Universal Access in the OS X Preferences&#8217; title=&#8217;Universal Access in the OS X Preferences&#8217;&gt;&lt;/p&gt;

&lt;p&gt;Load the iOS Simulator and open the &lt;em&gt;Settings&lt;/em&gt; application. Enable accessibility using the switch under &lt;em&gt;General &gt; Accessibility&lt;/em&gt;. If you see a little coloured box appear, you have successfully enabled accessibility in the simulator. The setting is stored in an underlying plist file under that iOS version of the simulator, so you will need to enable this setting for for both iOS 4 and 5 separately, but that will effect all of the device types (iPhone, iPhone Retina and iPad) for that OS version. The iOS Simulator will keep accessibility enabled as long as you don&amp;#8217;t clear out its settings. If you&amp;#8217;re anything like me, you have &lt;em&gt;Reset Content and Settings&lt;/em&gt; mapped to a keyboard shortcut, you&amp;#8217;ll regularly need to navigate in and re-enable accessibility.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#8217;right &#8217; src=&#8217;http://sgleadow.github.com/images/posts/accessibility/enable-on-simulator.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Enable accessibility in the iOS Simulator&#8217; title=&#8217;Enable accessibility in the iOS Simulator&#8217;&gt;&lt;/p&gt;

&lt;p&gt;The small coloured box that appears is called the accessibility inspector. It shows a small summary of what is available from the UIAccessibility framework for iOS. There are two main types of information shown in the inspector: notifications and properties. Notifications are fired when the UI changes. To be honest, I&amp;#8217;ve not played around with firing accessibility notifications much at all. Notifications could be a potential solution for tests that need to &amp;#8216;wait&amp;#8217; until a screen transition is finished before continuing rather than busy-waiting or just a plain old sleep (you know it&amp;#8217;s not a real test suite unless there are a couple of &lt;em&gt;sleep&lt;/em&gt; calls in there!).&lt;/p&gt;

&lt;p&gt;The properties show aspects of the selected UI element. With the accessibility inspector expanded, tap around in some of Apple&amp;#8217;s built in applications to see the UIAccessibility properties. With the accessibility inspector expanded like this, the first touch even brings up the accessibility - which is great if that&amp;#8217;s the only way to use the app, but can get in the way if you&amp;#8217;re not used to it. If you collapse the inspector using the little cross-button, touch interaction returns to normal.  In the image above I&amp;#8217;ve collapsed the accessibility inspector and dragged it to the side, since the properties are available to our tests anyway, so it&amp;#8217;s easiest to get it as far off the screen as possible.&lt;/p&gt;

&lt;h2&gt;Enabling accessibility on the device&lt;/h2&gt;

&lt;p&gt;Usually, to get access to the accessibility framework on an actual iOS device, you need to enable &lt;em&gt;VoiceOver&lt;/em&gt;. If you do your testing with Apple&amp;#8217;s sanctioned UIAutomation Instrument, it seems to be able to hook in automatically without you having to specifically enable those features. Although with iOS 5, I&amp;#8217;ve found that to not always be the case.&lt;/p&gt;

&lt;p&gt;VoiceOver is pretty easy to enable in the Settings app under &lt;em&gt;General &gt; Accessibility &gt; VoiceOver&lt;/em&gt;. Once this is enabled, the device acts in a similar way to when you have the accessibility inspector visible in the simulator. A pleasant computerised voice now describes your every gesture, and more importantly, activates the accessibility framework for all applications, including the one you want to test. Your first tap will select a UI element and read the available information about it. Double-tapping actually executes the action for a button. People using VoiceOver as a means to navigate the OS are likely to drag their finger on the screen to get a better idea of where items are relative to each other, so single-finger scrolling is also disabled. You can scroll by dragging with three fingers.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#8217;left &#8217; src=&#8217;http://sgleadow.github.com/images/posts/accessibility/itunes-configure-accessibility.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Configure Universal Access in iTunes&#8217; title=&#8217;Configure Universal Access in iTunes&#8217;&gt;
&lt;img class=&#8217;left &#8217; src=&#8217;http://sgleadow.github.com/images/posts/accessibility/itunes-voiceover-on.png&#8217; width=&#8221; height=&#8221; alt=&#8217;Enable VoiceOver in iTunes&#8217; title=&#8217;Enable VoiceOver in iTunes&#8217;&gt;&lt;/p&gt;

&lt;p&gt;Navigate some well known apps on the phone, and see how Apple&amp;#8217;s own applications integrate with VoiceOver. To actually design an accessible application, you&amp;#8217;ll be wanting to spend a whole lot of time using VoiceOver yourself to get an idea of what information is useful and necessary. At some stage, you will pick up a test device with VoiceOver on, so it’s good to know at least how to get into the settings and turn accessibility off in order to operate manually.&lt;/p&gt;

&lt;p&gt;If you are only enabling VoiceOver for testing purposes, the changed gestures and audio instructions can seem to get in the way of you just using the device. If you regularly switch accessibility on and off, using iTunes is going to be much more convenient. Before the latest version of iTunes, enabling accessibility this way required the device to be plugged in via USB. I was pleasantly surprised to discover that this VoiceOver can now be toggle on and off over wifi.&lt;/p&gt;

&lt;h2&gt;Enabling accessibility programmatically&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: these steps apply to the iOS Simulator only. If someone knows how to enable accessibility programmatically on the device, I would love to know&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you are running tests in the simulator, it&amp;#8217;s likely that you use the &lt;em&gt;Reset Content and Settings&amp;#8230;&lt;/em&gt; menu item frequently. If you forget to reenable accessibility after this, tests will fail because UI information will not be available to the tests. We need a programmatic way to turn accessibility on. I&amp;#8217;m not sure how to do this on the device, but in the simulator, this is just a matter of setting a flag in one of the underlying plist files. It&amp;#8217;s possible to call plist editors from the command line to do this, but then the plist file is separate for each iOS version supported by the simulator. I find it&amp;#8217;s easier to call from the Objective C code at run time, since it it possible to obtain the root for that version of the simulator.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;6&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;7&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;8&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;9&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;10&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;11&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;12&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;13&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;14&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;15&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;16&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;17&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;18&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;19&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;20&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;21&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;22&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;objc&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;NSAutoreleasePool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoReleasePool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSAutoreleasePool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulatorRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSProcessInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;objectForKey:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;IPHONE_SIMULATOR_ROOT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulatorRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appSupportLibrary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulatorRoot&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringByAppendingPathComponent:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;/System/Library/PrivateFrameworks/AppSupport.framework/AppSupport&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileSystemRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTLD_LAZY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;n&quot;&gt;CFStringRef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copySharedResourcesPreferencesDomainForDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFStringRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appSupportLibrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;CPCopySharedResourcesPreferencesDomainForDomain&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copySharedResourcesPreferencesDomainForDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;            &lt;span class=&quot;n&quot;&gt;CFStringRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessibilityDomain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copySharedResourcesPreferencesDomainForDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.apple.Accessibility&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessibilityDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;                &lt;span class=&quot;n&quot;&gt;CFPreferencesSetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CFSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ApplicationAccessibilityEnabled&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCFBooleanTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessibilityDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCFPreferencesAnyUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kCFPreferencesAnyHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;                &lt;span class=&quot;n&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessibilityDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autoReleasePool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;I first tried to use this code in &lt;code&gt;init&lt;/code&gt; for a test framework class, and it didn&amp;#8217;t seem to work. Moving the code to be called from &lt;code&gt;load&lt;/code&gt; solved the problem. Since this code actually changes a &lt;em&gt;plist&lt;/em&gt; file on the file system, perhaps it needs to be executed early before the UI loads so that the rest of the system acts as if accessibility is enabled. Not only does this approach ensure accessibility is always enabled in the simulator, it doesn&amp;#8217;t bring up the inspector over the top of the UI.&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href=&quot;http://twitter.com/#!/0xced&quot;&gt;Cedric Luthi&lt;/a&gt;, who originally wrote the code to enable accessibility programmatically for DCIntrospect &lt;a href=&quot;https://github.com/0xced/DCIntrospect/commit/49b76a6630cc29444aac30f14fd0fc17e22b37cf&quot;&gt;in this commit&lt;/a&gt;, and to an awesome colleague of mine, Sadat Rahman (@sadatrahman), for bringing that code to my attention.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Moving From Wordpress to Octopress</title>
    <link href="http://sgleadow.github.com/blog/2011/09/16/moving-from-wordpress-to-octopress/"/>
    <updated>2011-09-16T16:53:00+10:00</updated>
    <id>http://sgleadow.github.com/blog/2011/09/16/moving-from-wordpress-to-octopress</id>
    <content type="html">&lt;p&gt;My Wordpress blog was a complete failure in terms of content and effort on my part. I blame part of this on the barrier of having to use Wordpress, which I find bloated and slow. I want to write blogs the same way I write code: in my text editor using git to keep track of changes, and deploying with a git push. I&amp;#8217;m hoping most of my posts will involve a lot of code snippets, so being able to edit the posts in a proper programmer&amp;#8217;s text editor, in plain text, using Markdown is ideal.&lt;/p&gt;

&lt;p&gt;I tried to get &lt;code&gt;jekyll&lt;/code&gt; set up, but being a bit of a noob when it comes to stylesheets as well as Ruby, I just couldn&amp;#8217;t find the time to get the blog set up properly. This morning I read about Matt Gemmell&amp;#8217;s blog &lt;a href=&quot;http://mattgemmell.com/2011/09/12/blogging-with-octopress/&quot;&gt;moving to Octopress&lt;/a&gt;, which seemed the best of both worlds. The simple ongoing use and management that jekyll provides, and with some additional scripts to set it all up for me.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve gone and set it all up this afternoon, now to see if that means I actually have the time to write up posts!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Xcode 4 Shortcuts Lightning Talk</title>
    <link href="http://sgleadow.github.com/blog/2011/04/19/xcode-4-shortcuts-lightning-talk/"/>
    <updated>2011-04-19T16:46:00+10:00</updated>
    <id>http://sgleadow.github.com/blog/2011/04/19/xcode-4-shortcuts-lightning-talk</id>
    <content type="html">&lt;p&gt;Last week I have a short lightning talk with Jesse Collis (@sirjec) at the Melbourne Cocoaheads meetup. The topic was fairly boring, just some useful Xcode 4 shortcuts we have found since switching from Xcode 3 a few weeks ago. It ended up being a bit of a laugh, probably the first and only time a talk about keyboard shortcuts will be funny - I think it had something to do with the pizza and beer that had just arrived.&lt;/p&gt;

&lt;p&gt;Jesse saved me the effort of writing up anything more and linking to the slides on his blog below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.jcmultimedia.com.au/2011/04/xcode4-shortcuts-melbourne-cocoaheads-april-2011.html&quot;&gt;http://blog.jcmultimedia.com.au/2011/04/xcode4-shortcuts-melbourne-cocoaheads-april-2011.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve managed to find the &lt;a href=&quot;http://vimeo.com/22598371&quot;&gt;video footage of the xcode shortcuts talk&lt;/a&gt; put together by Oliver Jones (@orj) on vimeo. After flicking through the footage a couple of questions were raised that I can now answer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Q: &lt;em&gt;Does Cmd+Option+[ or ] work if multiple lines are selected?&lt;/em&gt;&lt;br/&gt;
A: Yes.&lt;/li&gt;
&lt;li&gt;Q: &lt;em&gt;Does Ctrl+6 for the class outline in the jump bar work in non-primary editors?&lt;/em&gt;&lt;br/&gt;
A: Yes, it is based on the editor that has focus.&lt;/li&gt;
&lt;li&gt;Follow up: &lt;em&gt;Proper clean (Cmd+Option+Shift+K) did not completely clean the build for us.&lt;/em&gt;&lt;br/&gt;
&lt;code&gt;rm -rf&lt;/code&gt; is still your friend&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The Melbourne Cocoaheads faithful also contributed some keyboard shortcuts of their own, here are the ones I jotted down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Cmd+Ctrl+Opt+?&lt;/em&gt; - open item under the cursor in Xcode help (&amp;#8220;real help, not the stupid little help&amp;#8221; @tupps)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cmd+Double-Click&lt;/em&gt; - drill through to the implementation&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cmd+Opt+,&lt;/em&gt; - open current file back in the main editor&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cmd+/&lt;/em&gt; - Comment Line&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cmd+Shift+[ or ]&lt;/em&gt; - navigate back and forth between tabs&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cmd+T&lt;/em&gt; - Open new tab (same as Safari)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cmd+Ctrl+Up and Down&lt;/em&gt; - switch between counterparts&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;and a few more shortcuts I&amp;#8217;ve found since then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Cmd+Ctrl+Opt+Up&lt;/em&gt; - open up the counterpart in the secondary editor&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;#8230;&lt;/em&gt; - Organise Import&amp;#8230; just kidding. Maybe one day.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&amp;#8217;m sure there are plenty more shortcuts I haven&amp;#8217;t found yet. Let me know the ones you find most useful.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RVM: Escaping Gem Dependency Hell</title>
    <link href="http://sgleadow.github.com/blog/2011/03/27/rvm-escaping-gem-dependency-hell/"/>
    <updated>2011-03-27T16:02:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/03/27/rvm-escaping-gem-dependency-hell</id>
    <content type="html">&lt;p&gt;This is my second post on my move to rvm. The first being about &lt;a href=&quot;blog/2011/03/27/cleaning-out-ruby-gems-under-os-x/&quot;&gt;cleaning out my existing gems&lt;/a&gt; for a fresh start.&lt;/p&gt;

&lt;p&gt;Bundler seemed like it was the ideal solution to having specific gems for specific projects, but it seems to install in your system gems by default causing version and dependency conflicts with other projects I&amp;#8217;m working on. I know I can use &lt;code&gt;bundle &#8211;deployment&lt;/code&gt; but then I have to &lt;code&gt;bundle exec&lt;/code&gt; everything and I don&amp;#8217;t have enough Ruby-fu to use the bundler-managed gems within Rakefile etc.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m looking to &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;rvm&lt;/a&gt; to solve the problem. The steps I followed are below:&lt;/p&gt;

&lt;h2&gt;Installing RVM&lt;/h2&gt;

&lt;p&gt;There are some pretty good &lt;a href=&quot;http://rvm.beginrescueend.com/rvm/install/&quot;&gt;installation instructions&lt;/a&gt; on the rvm site. The actual installation is a just single command.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;curl -B http://rvm.beginrescueend.com/install/rvm&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;You&amp;#8217;ll see a bunch of output, and towards the bottom, a confirmation message saying &amp;#8220;Installation of RVM to /Users/sgleadow/.rvm/ is complete.&amp;#8221;, but that&amp;#8217;s not all. You need to set up your shell to know about rvm. Put the following line into your .bash_profile or wherever your chosen shell wants it.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -s &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; . &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;After that, source your profile and check rvm is present and accessible.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;6&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which rvm/Users/sgleadow/.rvm/bin/rvm
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;/Users/sgleadow/.rvm/bin/rvm
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm &#8211;version
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;rvm 1.5.2 by Wayne E. Seguin &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;wayneeseguin@gmail.com&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;http://rvm.beginrescueend.com/&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;rvm | head -1
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;rvm is a &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;h2&gt;Installing some Rubies&lt;/h2&gt;

&lt;p&gt;Now that rvm is installed, let&amp;#8217;s install some rubies to use with it. First, check which ruby versions are available.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm list known
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&#8230;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ruby-&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;1.8.7&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-p334&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&#8230;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;I&amp;#8217;ll install the main two versions that I&amp;#8217;m using at the moment. Each install will take a few minutes, so this is a good time to make a cup of tea. I would usually say coffee but I haven&amp;#8217;t bought any fresh coffee beans in a while and the stuff I has is so old that the coffee tastes like sawdust.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm install 1.8.7
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm install 1.9.2
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;I&amp;#8217;m still using 1.8.7 for some things at the moment, so I&amp;#8217;ll set that up as the default, and double check that the active ruby binary is now the one I just installed using rvm.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;6&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;7&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;8&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;9&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm &#8211;default use 1.8.7
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -v
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;ruby 1.8.7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2011-02-18 patchlevel 334&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;i686-darwin10.7.0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which ruby
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;/Users/sgleadow/.rvm/rubies/ruby-1.8.7-p334/bin/ruby
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which gem
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;/Users/sgleadow/.rvm/rubies/ruby-1.8.7-p334/bin/gem
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm list default
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;Default Ruby &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;new shells&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;ruby-1.8.7-p334 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; x86_64 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Done. We have rvm up and running&lt;/p&gt;

&lt;h2&gt;Setting up your gemsets&lt;/h2&gt;

&lt;p&gt;While rvm solves the issue of having multiple versions of ruby installed on the one machine, and switching between them, it also allows you to set up multiple gemsets, which is the feature that started me on this journey in the first place. I&amp;#8217;d like to set up a separate gemset for each separate project to try and keep them separate and escape from dependency hell.&lt;/p&gt;

&lt;p&gt;I should have a pretty clean slate to start on for my gems. I&amp;#8217;m not 100% on whether rvm will use my old system gems or not, but I&amp;#8217;ve cleaned them all out anyway, so it shouldn&amp;#8217;t be a problem.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;5&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;6&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;7&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;8&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem list
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;*** LOCAL GEMS ***
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;rake &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.8.7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm list gemsets
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;rvm &lt;span class=&quot;nv&quot;&gt;gemsets&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; ruby-1.8.7-head &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; x86_64 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;   ruby-1.8.7-head@global &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; x86_64 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;   ruby-1.9.2-head &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; x86_64 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;   ruby-1.9.2-head@global &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; x86_64 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;rvm will set up a default gemset for you, but I&amp;#8217;d like to have each project automatically set its own ruby version and gemset. We can use the .rvmrc file to achieve this. I&amp;#8217;m setting a project up that uses the &lt;a href=&quot;https://github.com/moredip/Frank&quot;&gt;Frank&lt;/a&gt; iOS testing tool, below is a sample of the .rvmrc file I have &lt;em&gt;inside&lt;/em&gt; that my project root directory. When I enter that directory in the shell, rvm picks up the rc file and will switch to that version of ruby (the part before the @) and also switch to a specific gemset (the part after the @). The &lt;code&gt;&#8211;create&lt;/code&gt; means that if the gemset does not already exist, create one. The first time you enter the directory, you will need to specifically allow rvm to do this. After that, it&amp;#8217;s automatic.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat my_project/.rvmrc
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;rvm &#8211;create use ruby-1.8.7-p334@frank
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Once the .rvmrc file is created, leave and return to the directory to kick it off, authorise it and you should see something like &lt;code&gt;Using /Users/sgleadow/.rvm/gems/ruby-1.8.7-p334 with gemset frank&lt;/code&gt; printed to the console. To double check we are, in fact, using the newly created gemset, use &lt;code&gt;rvm list gemsets&lt;/code&gt; or &lt;code&gt;rvm gemset list&lt;/code&gt; and check the little hashrocket is pointing to the new gemset. Do another &lt;code&gt;gem list&lt;/code&gt; to double check you have a clean slate.&lt;/p&gt;

&lt;p&gt;Most of my projects use bundler, so first I&amp;#8217;ll need to install that, then I can use bundler to manage all the gems I need installed. Before using bundler, I wanted to remove the existing gems that had been used by bundler.&lt;/p&gt;

&lt;figure role=code&gt;&lt;figcaption&gt;&lt;span&gt;&lt;/span&gt;&lt;/figcaption&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&#8217;line&#8217;&gt;1&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;2&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;3&lt;/span&gt;
&lt;span class=&#8217;line&#8217;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217; width=&#8217;100%&#8217;&gt;&lt;pre&gt;&lt;code class=&#8217;bash&#8217;&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm .bundle/config
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -r vendor/bundle
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler
&lt;/div&gt;&lt;div class=&#8217;line&#8217;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle
&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;


&lt;p&gt;Bundler should install all the gems listed in the Gemfile into the gemset you have just defined for this project. Once bundle is complete, check the gems were installed in the gemset and not just in vendor with &lt;code&gt;gem list&lt;/code&gt;. If you&amp;#8217;re project is all set up with a Rakefile to run your tests, try that to double check everything has gone smoothly.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Cleaning Out Ruby Gems Under OS X</title>
    <link href="http://sgleadow.github.com/blog/2011/03/27/cleaning-out-ruby-gems-under-os-x/"/>
    <updated>2011-03-27T15:55:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/03/27/cleaning-out-ruby-gems-under-os-x</id>
    <content type="html">&lt;p&gt;As a bit of background, I have been getting into Ruby development for the past year, but I have been getting into gem dependency hell recently. Different projects need different gemsets. &lt;a href=&quot;http://gembundler.com/&quot;&gt;Bundler&lt;/a&gt; helps but I want to use that in combination with &lt;a href=&quot;http://rvm.beginrescueend.com/&quot;&gt;rvm&lt;/a&gt; to keep things organised.&lt;/p&gt;

&lt;p&gt;To get a clean start with rvm, so I wanted to remove all my existing system gems. My first attempt used the little shell script below to loop over all installed gems and remove them. That worked for a lot of gems, but left some behind, possibly all the default gems that come pre-installed with OS X.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ for x in `gem list &#8211;no-versions` ; do gem uninstall -aIx $x; done&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After some googling, the next step I tried was to physically remove the gem directories that are returned by &lt;code&gt;gem env paths&lt;/code&gt;. After that, &lt;code&gt;gem list&lt;/code&gt; said there were no gems installed. There were still some binaries left over that depended on these gems, like &lt;code&gt;spec&lt;/code&gt;, &lt;code&gt;rails&lt;/code&gt;, &lt;code&gt;rake&lt;/code&gt; in &lt;code&gt;/usr/bin&lt;/code&gt;. These binaries no longer worked as the actual gem was gone, so I removed them. I couldn&amp;#8217;t find a definitive list of the OS X default gems so I stopped here.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not a shell guru by any means, but below is my attempt at a quick one line shell script to remove all the existing gem directories.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm -rf `gem env paths | tr &quot;:&quot; &quot; &quot;`&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://sgleadow.github.com/blog/2011/03/26/hello-world/"/>
    <updated>2011-03-26T15:47:00+11:00</updated>
    <id>http://sgleadow.github.com/blog/2011/03/26/hello-world</id>
    <content type="html">&lt;p&gt;I&amp;#8217;ve been meaning to start a blog for a while know. Until now, I&amp;#8217;ve kept notes to myself in all sorts of places about problems I&amp;#8217;ve encountered while developing software and solutions I&amp;#8217;ve found. My favourite way of keeping notes to date is in a nice Moleskine notebook with a fountain pen - a bit backwards I know, you wouldn&amp;#8217;t believe I write software for a living.&lt;/p&gt;

&lt;p&gt;Often my notes just disappear into the depths of my filesystem or bookshelf never to be seen again. If I&amp;#8217;m really proactive, I might write up an answer on Stack Overflow or reply to a mailing list. The next time I want to share that experience, I have to filter through to find that information again&lt;/p&gt;

&lt;p&gt;Hopefully a blog will be an easier way to keep track of this information and later refer to it. Whether it&amp;#8217;s useful information or not remains to be seen, but it will at least be useful to me. For shorter, random and less useful musings, I&amp;#8217;m on twitter at @stewgleadow&lt;/p&gt;

&lt;p&gt;The current topics I&amp;#8217;m interested in are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Objective C and native iOS apps&lt;/li&gt;
&lt;li&gt;testing iOS apps, mainly with GHUnit and Frank&lt;/li&gt;
&lt;li&gt;ReST APIs in Ruby/Rails&lt;/li&gt;
&lt;li&gt;hand-wavy discussion about agile software development and testing in general&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;User groups I&amp;#8217;m involved in or attend occasionally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.melbournecocoaheads.com/&quot;&gt;Melbourne Cocoaheads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://melbournepatterns.org/&quot;&gt;Melbourne Patterns Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.meetup.com/Agile-Melbourne/&quot;&gt;Agile Alliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yowconference.com.au/&quot;&gt;YOW Conference and tech nights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.swipeconference.com.au&quot;&gt;Swipe Conference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  
</feed>
